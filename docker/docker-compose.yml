version: '3.8'

services:
  # Main API service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/homeverse
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=dev-secret-key-change-in-production
      - LOG_LEVEL=INFO
      - SQL_DEBUG=false
    depends_on:
      - db
      - redis
    volumes:
      - ../app:/app/app:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A app.workers.celery_app worker --loglevel=info --queues=default,reports,analytics,documents,notifications
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/homeverse
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=dev-secret-key-change-in-production
    depends_on:
      - db
      - redis
    volumes:
      - ../app:/app/app:ro
    restart: unless-stopped

  # Celery beat (scheduler)
  beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A app.workers.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/homeverse
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=dev-secret-key-change-in-production
    depends_on:
      - db
      - redis
    volumes:
      - ../app:/app/app:ro
    restart: unless-stopped

  # PostgreSQL database
  db:
    image: postgis/postgis:15-3.3
    environment:
      - POSTGRES_DB=homeverse
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d homeverse"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Flower (Celery monitoring)
  flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: celery -A app.workers.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: